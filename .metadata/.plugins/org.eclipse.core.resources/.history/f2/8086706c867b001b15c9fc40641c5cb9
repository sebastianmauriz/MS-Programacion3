package com.programacionutn.microservicios.commons.examenes.models.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Entity
@Table(name = "examenes")
public class Examen {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
    @NotEmpty //al ser un String se valida con notEmpty, y los objetos se validan con NotNull
    @Size(min = 4, max = 20)
	private String nombre;
	
	@Column(name = "creat_at")
	@Temporal(TemporalType.TIMESTAMP)
	private Date createAt;

	@JsonIgnoreProperties(value = {"examen"}, allowSetters = true )
	@OneToMany(mappedBy = "examen" ,fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true) 
	//el cascade es para qie al eliminar o crear un examen se crea o elimina tb sus preguntas
	//cualquier pregunta que no este relacionada a un examen al ser removido, sera null y se eliminara, queda huerfano, es por eso que se elimina
	private List<Pregunta>preguntas;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@NotNull
	private Asignatura asignaturaPadre;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@NotNull
	private Asignatura asignaturaHija;
	
	//esta annotation lo que hace es que no lo mapea a la tabla al atributo, es decir no crea el campo
	//Lo hacemos asi porque sino pondria true o false a todos los examenes de todos los alumnos, y por ahí hay
	//alumnos que no hay realizado el examen aún. Entonces al hacerlos con esta annotation pódemos usar el 
	//atributo con cada alumno en forma individual
	@Transient 
	private boolean respondido;
	
	@PrePersist
	public void prePersist() {
		this.createAt= new Date();
	}
	
	//Esta es una relacion de composicion, es por eso que debemos crear las preguntas cuando se cree un examen
	public Examen() {
		this.preguntas= new ArrayList<>();
	}


	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public Date getCreateAt() {
		return createAt;
	}

	public void setCreateAt(Date createAt) {
		this.createAt = createAt;
	}
	public List<Pregunta> getPreguntas() {
		return preguntas;
	}
	public void setPreguntas(List<Pregunta> preguntas) {
		this.preguntas.clear();
		preguntas.forEach(this::addPregunta);
	}
	
	public void addPregunta(Pregunta pregunta) {
		this.preguntas.add(pregunta);
		pregunta.setExamen(this);
	}

	public void removePregunta(Pregunta pregunta) {
		this.preguntas.remove(pregunta);
		pregunta.setExamen(null); //cuando elimino una pregunta, elimina la foreingKey del examen ya que al poner
		//aca null, actual el orphanremoval y elimina la pregunta
	}

	
	
	//se implementa el metodo equals para poder eliminar un examen, este metodo lo que hace es
	//comprobar que exista o no ese elemento a eliminar. Se hace aca la funcion ya que esta es una clase padre
	
	
	
	
	public boolean isRespondido() {
		return respondido;
	}

	public Asignatura getAsignaturaPadre() {
		return asignaturaPadre;
	}

	public void setAsignaturaPadre(Asignatura asignaturaPadre) {
		this.asignaturaPadre = asignaturaPadre;
	}

	public Asignatura getAsignaturaHija() {
		return asignaturaHija;
	}

	public void setAsignaturaHija(Asignatura asignaturaHija) {
		this.asignaturaHija = asignaturaHija;
	}

	public void setRespondido(boolean respondido) {
		this.respondido = respondido;
	}

	@Override
		public boolean equals(Object obj) {
			if(this==obj) {
				return true;
			}
			//ahora debemos comprobar que esa instancia pertenezca al mismo tipo
			if(!(obj instanceof Examen)) {
				return false;
			}
			//el objeto que pasamos lo casteamos a Examenes
			Examen exam= (Examen) obj;
			//si el id no es nulo y el id es igul al que le estamos pasando, retorna true		
			return this.id !=null && this.id.equals(exam.getId());
		}
		
		
	}
	

